Neata Adrian 321CB

	EXPLICATII FUNCTIONARE ALGORITM

	Pentru a reduce HCP la SAT trebuie sa cream o functie boolean dependenta de graful dat ca input care sa nu poata fi satisfacuta decat daca graful este hamiltonian. Rezolvarea acestei reduceri presupune verificarea tuturor subgrafurilor grafului dat ca input pentru un ciclu hamiltonian (daca graful este hamiltonian atunci unul din subgrafurile sale va fi un ciclu care trece prin toate nodurile, iar functia booleana asta "cauta"). Desigur ca pentru a se verifica in paralel toate subgrafurile este nevoie de o variabila prin care sa poti diferentia in ce caz te afli (in functie de subgraful in care te aflii vei verifica alte drumuri pentru gasirea ciclului). Aceasta variabila este ai-j unde i apartine [1, n/2 + 1] (daca avem un ciclu de n noduri atunci distanta dintre oricare doua noduri nu poate fi mai mare decat n/2 + 1, iar aceasta restrictie ne elimina multe cazuri in care nu poate exista un ciclu). ai-j nu numai ca restrictioneaza numarul de subgrafuri generate, dar reprezinta si o metoda de a afla in care subgraf sau mai bine zis, grup de subgrafuri te aflii.
	Contrar asteptarilor mele initiale xi-j este diferit de xj-i deoarece desi ambele reprezinta aceeasti muchie, se tine cont si de orientarea acesteia.
	De cele mai multe ori cand folosim | (sau) il folosim in scopul paralelizarii subgrafurilor (sa le facem pe toate deodata si sa cautam ciclul hamiltonian), iar & (si) pentru a restrictiona cautarea si a pune cap la cap drumul. Daca un subgraf este strict un ciclu hamiltonian (nu are muchii suplimentare) atunci fiecare nod are exact doua muchii adiacente.
	Prima parte a problemei va fi sa se verifice daca fiecare nod din graful initial are cel putin 2 noduri adiacente caz in care se poate continua rezolvarea, altfel se printeaza in fisier o functie booleana care va fi mereu falsa ( x & ~x ) si ne oprim. 

	1 Generarea subgrafurilor:
	1A.Pentru fiecare nod in parte se selecteaza cate doua muchii si celelalte se neaga deoarece vrem un subgraf care sa contina strict ciclul hamiltonian. Toate posibilitatile de selectie a doua muchii pentru un anumit nod sunt unite cu | (sau) in scopul paralelizarii, iar intre doua noduri diferite cu & (si) in scopul "legarii" lor. 
	1B.Pe langa acestea, pentru fiecare nod exceptand 1 se verifica daca drumul de la 1 pana la acel nod este <= decat n/2 + 1 (altfel, dupa cum am explicat mai sus, nu am mai avea un ciclu hamiltonian).
	1C.Se verifica ca nu s-au ales ambele sensuri ale unei muchii (xi-j si xj-i) (deoarece daca ar fi fost alese atunci, cu exceptia cazului in care graful are doar 2 noduri, am fi avut o bucla intre cele doua noduri si deci nu am mai avea un ciclu hamiltonia).
	1D.Nu vrem muchii suplimentare fata de cele ale grafului initial (altfel nu s-ar mai pune problema subgrafurilor) si de aceea se verifica ca nodul 1 sa nu aiba vreo muchie adiacenta care sa lipseasca din graful initial.
	2 Verificarea finala:
	Ne folosim de ai-j pentru a determina in care tip de subgrafuri ne aflam si construim o functie booleana care sa parcurga in paralel drumul de la nodul 1 pentru toate subgrafurile. Daca nu ne aflam in cazul determinat de ai-j atunci functia va intoarce 1 si programul se va uita la urmatoare, altfel se va verifica ca drumul este in continuare bun si va intoarce 0 sau 1 in functie de rezultat. 


	Pentru input-ul graph1.in:
4
1 2
2 3
2 4
3 4
1 3
-1

	Avem rezolvarea:
1A: (x1-2 & x1-3) &
1A: ((x2-1 & x2-3 & ~x2-4) | (x2-1 & x2-4 & ~x2-3) | (x2-3 & x2-4 & ~x2-1)) &
1B: (a1-2 | a2-2 | a3-2) & 
1A: ((x3-2 & x3-4 & ~x3-1) | (x3-2 & x3-1 & ~x3-4) | (x3-4 & x3-1 & ~x3-2)) &
1B: (a1-3 | a2-3 | a3-3) & 
1A: (x4-2 & x4-3) & 
1B: (a1-4 | a2-4 | a3-4) & 
1C: ((x1-2 | ~x2-1) & (~x1-2 | x2-1)) &
1C: ((x1-3 | ~x3-1) & (~x1-3 | x3-1)) &
1C: ((x2-3 | ~x3-2) & (~x2-3 | x3-2)) &
1C: ((x2-4 | ~x4-2) & (~x2-4 | x4-2)) &
1C: ((x3-4 | ~x4-3) & (~x3-4 | x4-3)) &
1C: ((a1-2 | ~x1-2) & (~a1-2 | x1-2)) &
1C: ((a1-3 | ~x1-3) & (~a1-3 | x1-3)) &
1D: ~a1-1 & ~a1-4 &
2:  ((a2-2 | ~(((a1-3 & x3-2) | (a1-4 & x4-2)) & ~(a1-2))) & (~a2-2 | (((a1-3 & x3-2) | (a1-4 & x4-2)) & ~(a1-2)))) &
2:  ((a2-3 | ~(((a1-2 & x2-3) |(a1-4 & x4-3)) & ~(a1-3))) & (~a2-3 | (((a1-2 & x2-3) | (a1-4 & x4-3)) & ~(a1-3)))) &
2:  ((a2-4 | ~(((a1-2 & x2-4) | (a1-3 & x3-4)) & ~(a1-4))) & (~a2-4 | (((a1-2 & x2-4) | (a1-3 & x3-4)) & ~(a1-4)))) &
2:  ((a3-2 | ~(((a2-3 & x3-2) | (a2-4 & x4-2)) & ~(a1-2 | a2-2))) & (~a3-2 | (((a2-3 & x3-2) | (a2-4 & x4-2)) & ~(a1-2 | a2-2)))) &
2:  ((a3-3 | ~(((a2-2 & x2-3) | (a2-4 & x4-3)) & ~(a1-3 | a2-3))) & (~a3-3 | (((a2-2 & x2-3) | (a2-4 & x4-3)) & ~(a1-3 | a2-3)))) &
2:  ((a3-4 | ~(((a2-2 & x2-4) | (a2-3 & x3-4)) & ~(a1-4 | a2-4))) & (~a3-4 | (((a2-2 & x2-4) | (a2-3 & x3-4)) & ~(a1-4 | a2-4))))

	EXPLICATII IMPLEMENTARE ALGORITM

	Pentru reprezentarea grafului am avut de ales intre 3 optiuni: o matrice a grafului (m-ar fi costat cel mai mult din punct de vedere al timpul de rulare), o lista de muchii (mai greu de implementat si folosit in opinia mea) sau o lista de noduri in care sa apara vecinii fiecaruia (metoda aleasa).
	Din moment ce nu avem voie sa hardcodam (EDIT: mai nou pe forum a aparut un numar maxim de noduri, 100, dar am ales sa pastrez codul asa), am alocat dinamic structura ce implementa lista de noduri. Am cautat pe net ce complexitate ar avea alocarea si am gasit ca depinde de multe lucruri asa ca am presupus ca e O(n) (n numarul de noduri din graf) astfel am 3 alocari cea pentru nodes e O(n) cea pentru nodes[i].neighbours e O(n^2), iar cea pentru nodeOrder O(n). Functia care imi citeste muchiile variaza ca complexitate, dar in cel mai rau caz am un graf cu n*(n-1)/2 muchii si deci complexitatea o voi asuma ca fiind O(n^2). Verificarea ordinului fiecarui nod este O(n). Deoarece mi-ar fi fost mai usor sa am lista de noduri adiacente ordonata crescator, am luat fiecare lista si am sortat-o cu qsort care are complexitatea O(n*log n), dar am luat-o ca fiind O(n^2) (worst case) si deci intreaga sortare este O(n^3).
	Pentru urmatoarea parte am presupus worst case ceea ce ar insemna ca lungimea fiecarei liste de noduri adiacente este n (sau mai corect n - 1). Avem 5 for-uri imbricate, in programul meu le-am numerotat cu for1,2,3,4,5 ca se fie mai usoara explicatia. O sa ma uit mai intai la for4 care are complexitatea O(n), iar apoi la for3 care repeta for4 mai intai de (n-1) ori, apoi de (n-2) ori si tot asa pana la 1 (n * (n-1) + n * (n-2) + ... n = n * (n-1) * n / 2 = (n^3 - n^2) / 2). Complexitatea este O(n^3). for5 are complexitatea O(n), dar din moment ce este adunat cu celelalte 3 for-uri se ajunge ca in for1 sa se repete un algoritm cu complexitate O(n^3) de n ori si deci cu tot cu for1 complexitatea devine O(n^4) (sunt pe worst case, iar len va fi n).
	Algoritmul care se asigura ca nu s-a ales aceeasi muchie, cu orientari diferite este O(n^2), iar cel care verifica sa nu se fi ales vreo muchie legata de 1 care sa nu apara in graful original O(n).
	Ultima parte care verifica drumurile subgrafurilor apeleaza de n * (n-1) ori functia printPossiblePaths cu complexitatea O(n) si deci intregul algoritm este O(n^3). La urma se elibereaza zonele de memorie alocate, proces ce are loc in O(n).
	In final combinand toate aceste complexitati ajungem la O(n^4) ceea ce inseamna ca algoritmul folosit e polinomial.
	


